
1. 제어문이란?
  - 프로그램의 흐름을 제어할 수 있도록 도와주는 실행문
  - 조건식의 만족 여부에 따라 출력되는 실행문을 달리 나타나게 하려면 조건문을 사용해야 한다.


2. 조건문 
  - 조건 문의 종류 : if문, else문, else if문
    > if 문 : 조건식을 만족(true)할 경우에만 실행문 실행
        if(조건식) {
          실행문;
        }
      [실습. if_1.html]
    
    > else 문 : if 문의 조건식을 만족할 경우와 만족하지 않을 경우에 따라 실행되는 실행문이
                달라지게 하는 구문. 즉 두 가지의 결과가 나올 수 있다.
        if(조건식) {
          실행문1;
        } else {
          실행문2;
        }
        해석 : 먼저 if 문의 조건식을 판단해서 참일 경우 실행문1을 실행하고 else는 판단하지
               않고 빠져나간다. 하지만 조건식의 결과가 거짓인 경우 else 구문의 실행문2만
               실행한다.
        [실습. else_1.html]

    > else if 문 : 두가지 이상의 조건식과 정해 놓은 조건식을 만족하지 않았을 때 실행되는
                   실행문으로 이루어져 있는 구문
        if(조건식1) {
          실행문1;
        } else if (조건식2) {
          실행문2;
        } else if (조건식3) {
          실행문3;
        }else {
          실행문4;
        }
      [실습. elseif_1.html]

    > 중첩 if 문 : if문 블럭 내부에 안쪽 if문 작성하는 구조의 구문!
        if(조건식1) { // 바깥쪽 if 문

          조건식 1만 참일 경우 실행할 코드 작성;

          if(조건식2) { //안쪽 if 문

            조건식 1과 조건식 2가 모두 참일 경우 실행할 코드 작성; 

          }
        }


2. 선택문 switch문
  - 여러 개의 조선을 확인하여 해당하는 코드 블록{} 중괄호 안에 작성된 
    실행문을 실행시키는 제어문 중의 하나
  - 조건이 많을 때 if else if 구문보다 가독성을 높이고, 코드의 간결함을
     유지하는데 유리한 제어문 중 하나
  
    switch (평가될 표현식) {

      case value1:
        // value1이 평가될 표현식의 결과값과 일치할 때 실행될 코드 작성
        break; // 현재 case 블록을 종료하고 switch문을 빠져나간다.
        // break를 작성하지 않으면, 그 다음 case 블럭을 연달아서 검사하기 때문에 
        // 꼭 break; 구문은 case 유형의 마지막에 꼭 작성해야 한다.

      csse value2:
        // value2가 평가될 표현식의 결과값과 일치할 때 실행될 코드 작성
        break;
        ...
        ...

      default:
        // 위에 작성된 어떤 case 유형의 value들도 평가될_표현식의 결과값과
        // 일치하지 않을 때 실행될 코드 작성;
        break; // 마지막 default 자리에 적는 braek는 생략 가능하다.
    }

  [실습. switch_1.html]

  번외. elseif_1.html 파일에 작성된 if else-if else 문을 모두 switch 문으로 변경해보자
  [실습. switch_2.html] 




4. 반복문
  - 실행문을 원하는 횟수만큼 반복하여 실행 가능.
  - 반복문 종류 : while, do while, for
  
  > 주제1. 반복문은 왜 사용할까? [repeat-1.html]

  - while 반복문
    1) while문은 조건식이 참인 동안까지만 실행문을 여러 번 반복하여 실행시킬 수 있는
       반복문 종류 중 하나
    2) 문법
        // 변수에 조건을 판단하는 조건 초기값이 저장
        let 변수 = 초기값;

        // 그 다음 while 문을 작성해 사용
        while (조건식) {
          실행문;

          증감식;
        }
          > while 반복문의 실행 순서
           - 조건식을 검사하고 만일 참인 경우
           - 중괄호 {} 내부에 작성된 실행문 및 증감식을 실행
           - 다시 조건식을 검사하고 만약 거짓일 경우에는 while반복문을 빠져 나오고
            참일 경우에는 위의 과정을 다시 반복한다.
      [실습. while_1.html]
      [실습. while_2.html]
      [실습. while_3.html]


  - do while 반복문
    일단 반복실행할 명령을 한번 먼저 실행한 후 조건식을 판단해서
    true이면 do {} 내부에 작성된 반복실행할 명령 코드를 실행하고 
    조건식을 판단해서 false 이면 반복실행할 명령 코드를 실행하지
    않고 do{} while 반복문을 빠져나감.
        do {

          반복 실행할 명령;

        } while(조건식)

      [실습. do_while.html]


  - for 반복문
    : 조건식을 만족할 때까지 특정 실행문을 반복하여 실행하는 구문

    - 문법
      for (초기값; 조건식; 증감식) {
        실행문;
      }

    - 실행 순서
      초기값 -> 조건식 -> 실행문 -> 증감식

    - for 반복문 사용의 경우
      변수의 초깃값과 반복 크기가 일정할 경우 for 반복문 사용
      예를들어 변수에 숫자 0-9를 1씩 증가시키며서 0이 9가될때까지만
      차례로 반복해서 사용하려고 할 때 사용하면 편리함.

      while 또는 do while 반복문의 사용 경우
      변수의 초깃값이나 반복 크기 없이 조건식만 주어졌을 때 만이 사용
      어떤 조건식을 만족하는 동안만 반복 실행할 문장을 반복실행 할때 사용

    - break 문
      - 반복문인 while 또는 for 문에서 break 문을 작성해서 실행하면
        조건식의 결과와 상관없이 강제로 반복문을 종료할 때 사용하는 예약어
    - continue 문
      반복문 내에서 사용하는 예약어
      1. while 반복문 만에 있는 continue 문은 다음에오는 실행문은 무시하고 
          조건식에서 조건감사를 실행해! 라고 명령하는 구문
      2. for 반복문 안에 있는 continue문을 실행할 경우에는 continue 문 다음에 
          오는 실행문은 무시해 버리고 바로 증감식으로 이동하여 증감 연산을 실행

    - 중첩 for문
      -for문안에 for문을 사용하는 구문.
      -기본문법						
			    for(초기값; 조건식;  증감식){      //바깥쪽 for문
						for(초기값; 조건식; 증감식){  //안쪽  for문
								반복할 소스(실행문); 
						}
					}

    [실습. for_1.html]
    [실습. for_2.html]
    [실습. break_1.html]
    [실습. continue.html]
    [실습. double_for_1.html]
    [실습. double_for_2.html]
    [실습. set-result.html]




