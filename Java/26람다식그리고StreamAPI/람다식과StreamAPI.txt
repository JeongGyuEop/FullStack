

  1. 람다식이란?
  	- 람다식은 자바에서 JDK 8 이후에 나온 함수형 프로그래밍을 도입하면서
  	  기존에 사용되던 익명 클래스와 복잡한 코드 구조를 간결하게 대체할 수 있는
  	  익명함수(익명 메소드)를 생성하는 식이다.
  	  
  	- 람다식은 익명 함수라고 할 수 있으며,
  	  익명 객체 내부에서 작성된 익명 메소드의 역할을 한다.
  	  다만, 자바 컴파일러는 이를 더 최적화된 방식으로 처리하여
  	  익명 클래스보다 더 간결하고 효율적인 코드를 제공한다.
  	  
  	- 람다식은 이름이 없는 익명 객체 내부에 익명 메소드를 정의하는 식이며
  	  이 익명 메소드는 하나의 함수형 인터페이스를  구현한다.
  	  
  	 참고. 함수형 인터페이스는 오직 하나의 추상 메소드만 가지는 인터페이스를 말한다.
  	 
  ---------------------------------------------------------------------------------------------
  
  2. 람다식의 문법
  
  	- 람다식의 기본문법 1.
  		
  		(파라미터) -> { 익명 메소드의 실행할 코드 }
  		
  		설명.
  			람다식의 문법은 세가지 요소로 이루어진다.
  			1. (파라미터) : 람다식에 입력으로 전달되는 매개변수들
  			2. 화살표 연산자 (->) : 파라미터와 { 실행할 코드 } 본문을 구분하는 연산자
  			3. { 실행할 코드 } 함수의 본문 : 실제로 실행될 코드
  			
  ---------------------------------------------------------------------------------------------
  
  	- 람다식의 기본문법 1. 에 관한 예시 1
  		
  		(int a, int b) -> { return a+b; }
  		
  		설명 : 위 코드는 두개의 정수를 a와 b 매개변수로 받아 그 합을 반환하는 람다식이다.
  		
  ---------------------------------------------------------------------------------------------
  
  	- 람다식의 기본문법 1. 에 관한 예시 2 : 타입 생략 가능
  		
  		(a, b) -> a + b
  		
  		설명 : 컴파일러가 파라미터의 타입을 추론할 수 있을 때는 타입을 생략할 수 있다.
  		
  ---------------------------------------------------------------------------------------------

	- 람다식의 기본문법 1. 에 관한 예시 3 : 매개변수가 하나일 때 ()괄호 생략가능  		
  				
  		s -> System.out.println(s);
  		
  		설명 : 매개변수가 하나인 경우 괄호()도 생략할 수 있다.
  		
  ---------------------------------------------------------------------------------------------

  	- 람다식의 기본문법 1. 에 관한 예시 4 : 코드 블록 { }
  	
  		(a, b) -> { 
  		
  			int sum = a + b;
  			System.out.println("Sum : " + sum);
  			return sum;
  		
  		}
  		
  		설명 : 람다식에서 여러 줄의 코드를 작성할 때는 {} 중괄호를 사용하여 코드 블록 정의할 수 있다.
  		
  ---------------------------------------------------------------------------------------------

	3. 함수형 인터페이스?
		- 람다식을 사용하기 위해서는 자바의 함수형 인터페이스가 필요하다.
	      함수형 인터페이는 오직 하나의 추상 메소드를 가지는 인터페이스로,
	      자바에서 람다식을 사용할 수 있는 기반을 제공한다.
	      자바는 이러한 함수형 인터페이스를 여러 개 제공하며, 이는 모두 
	      java.util.function 패키지에 포함되어있다.
	      
	      함수형 인터페이스 예 실습 -> Ex1.java
  		  사용자 (개발자) 정의 함수형 인터페이스를 만들어서 사용한 예 실습 -> Main.java
  		  
  ---------------------------------------------------------------------------------------------

	4. 람다식을 스트림 (Stream) API에서 활용
	
		스트림 API  			
  			- 컬렉션(List, Set 등의 가변길이 배열)에서 데이터 흐름을 처리하는데 사용되는 API
  			- 데이터의 필터링, 변환, 집계 등의 작업을 함수형 인터페이스로 수행할 수 있는 API
  			- 스트림은 기본적으로 데이터를 한번 만 처리하는 통로 방식으로 동작하며, 
  			  중간 연산과 최종 연산으로 구분된다. 
  		
  		데이터 필터링 및 변환 활용 예시 Ex2_1.java
    
  		스트림(Stream) API에서 제공하는 주요 메소드들  - Ex3.java
  													   - Ex4.java
  									   				   - Ex5.java
  									   				   - Ex6.java
  									   
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  			