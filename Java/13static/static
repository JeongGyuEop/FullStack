



	static 키워드 
		: 자바에서 클래스, 메서드 변수, 또는 내부 클래스를 선언할 때 사용되며,
		  특정 객체(인스턴스)와 무관하게 클래스 자체에 속하는 멤버를 정의할 때 사용된다.
		  이를 통해 객체가 아닌 클래스 레벨에서 접근할 수 있는 멤버를 만들 수 있다.
		  
	static 키워드 사용 이유
		: 다음과 같은 상황에서 효율적이고 논리적으로 코드를 설계하기 위함
		  클래스와 관련된 특정 변수나 메소드를 객체와 독립적으로 정의할 수 있다.
		  
		 1. 메모리 관리 효율성
		 	- 공유된 메모리공간 : static으로 선언된 변수나 메서드는 클래스 로딩 시 메모리에 한 번만 할당된다.
		 						  이는 각 객체마다 개별적으로 메모리를 할당하지 않고 , 모든 객체가
		 						  같은 메모리 공간을 공유할 수 있게 한다.
		 						  예 ) 어떤 클래스의 모든 객체가 공유해야 하는 변수가 있을 때 static 변수를
		 						  		사용하면 메모리 사용량을 줄일 수 있다.
		 	
		 2. 공유된 데이터 관리
		 	- 공유 데이터 : 클래스의 모든 인스턴스가 동일한 데이터를 공유해야할 때.
		 					static  변수를 사용하여 해당 데이터를 관리할 수 있다.
		 					예) 모든 객체에서 공통적으로 접근하고 수정해야하는 카운터 변수 등이
		 						있을 때 유용하다.
		 						
		 3. 유틸리티 또는 헬퍼 메서드
		 	- 객체생성 없이 호출 가능 : 객체를 생성하지 않고도 호출할 수 있다.
		 								예) Math 클래스의 Math.random(), Math.abs()와 같은 메소드는
		 									객체를 생성하지 않고 바로 호출 가능
		 									
		 4. 클래스 간 데이터 공유
		 	- 전역 상태 유지 : 애플리케이션 내에서 전역적으로 상태를 유지할 수 있다.
		 						예) 설정 값이나 전역 설정 데이터를 전역 static 변수를 사용해 저장할 수 있다.
		 	
		 5. 정적 블록을 통한 초기화
		 	- 복잡한 초기화 작업 : 클래스가 로드될 떄 한 번만 실행되는 static 블록을 사용하여 복잡한
		 							초기화 작업을 수행할 수 있다. 정적 블록을 통해 정적 변수를 초기화하거나
		 							클래스 로딩 시 수행해야하는 작업을 정의할 수 있다.
		 							
		 6. 정적 내부 클래스
		 	- 독립적인 내부 클래스 : 정적 내부 클래스를 정의할 수 있다. 이 클래스는 외부 클래스의 인스턴스에
		 							종속되지 않으며, 외부 클래스의 정적 멤버에만 접근할 수 있다. 정적 내부 클래스는
		 							외부 클래스와 독립적으로 사용될 수 있기 때문에 캡슐화와 설계의 명확성을 높일
		 							수 있다.
		 							
	static을 붙일 수 없는 경우
		1. 클래스 레벨에서 동작해야 하는 변수나 메서드
			1) 공유 변수 : 모든 인스턴스가 공유해야 하는 변수를 선언할 때 static을 붙일 수 있다.
							-> 클래스의 모든 객체가 동일한 값을 공유해야할 때 사용
			2) 유틸리티 메서드 : 인스턴스와 무관하게 작동하는 메서드에 static 붙일 수 잇다.
			3) 정적 블록 : 클래스가 로드 될 때 한 번만 실행되어야 하는 초기와 코드에 static 사용가능
			4) 정적 내부 클래스 : 외부 클래스의 인스턴스와 무관하게 독립적으로 동작한느 내부 클래스를 
								  선언할 때 static을 붙일 수 있다.
		2. 상수 선언
	
	static을 붙일 수 있는 경우
		1. 인스턴스 변수
			: 인스턴스 변수는 각 객체마다 고유의 값을 가져야 한다. static을 붙이면 모든 객체가 같은 값을
			  공유하게 되어 인스턴스별로 고유한 상태를 유지할 수 없습니다. 							
		 
		2. 인스턴스 메서드
			: 객체의 상태(즉, 인스턴스 변수)에 따라 동작해야 합니다. 따라서 인스턴스 변수에 접근하는 
			  메서드는 static이 될 수 없습니다.			
		 			
		3. 추상 메서드
			: 추상 메서드는 객체 지향 프로그래밍에서 서브클래스에 의해 구현되어야 하는 메서드입니다. 
			  static은 클래스 레벨에서 고정된 메서드로, 추상 메서드와는 개념적으로 맞지 않습니다				
		
		 							
		 							
		 							
		 							
		 							
		 							
		 							
		 							
		 							
		 							
		 							
		 							
		 							
		 							
		 							
		 							
		 							
		 							
		 							
		 							