<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/action-mybatis.xml</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

 <!-- 한글깨짐 방지 --> 
    <!-- filter와 filter-mapping을 만들어 준다. -->
    <filter> 
        <!-- filter안에는 filter-name, filter-class, init-param을 추가해 준다.
              filter-name은 원하는대로 지정해도됨 -->
        <filter-name>encodingFilter</filter-name> 
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param> 
            <!-- encoidng값을 UTF-8로 만들어 준다. -->
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

</web-app>



<!-- 
log4j란?
 - 프로젝트가 정상적으로 실행되는지 테스트 하는 라이브러리 
 - log4j 테스트 기능은 독립적으로  설치해서 사용할수 있으며
      메이븐 같은 빌드 툴에서는 프로젝트 생성시 자동으로  log4j.jar라이브러리 파일이
      설치 됩니다.

log4j.xml파일에 작성될 태그들의 특징

	<Appender>태그
	- 로그의 출력 위치를 결정(파일에 저장, console탭에 출력, DB에 저장 등)
	  XXXAppender로 끝나는 클래스들의 이름을 보면 출력 위치를 알수 있습니다.
	
	<Layout>태그 
	- Appender가 어디에 로그메세지를 출력할것인지를 결정 했다면
	    어떤 형식의 데이터로 출력할지 출력 레이아웃을 결정하는 태그 
	  
	<Logger>태그
	- 로깅 메세지를 Appender에 전달합니다.
	   개발자가 로그 레벨을 이용해 로그 출력 여부를 조정할수 있습니다.
	  logger는 로그 레벨을 가지고 있으며,
	    로그의 출력여부는 로그문의 레벨과 로거의 레벨을 가지고 결정합니다.
	  
	참고. <Appender>태그를 이용해 로그메세지를 이클립스의 console탭에
		 출력할지와 출력위치를 설정합니다.
		 <Layout>태그로 출력시 어떤 데이터형식으로 출력할지 설정 합니다.
		 <Logger>태그에서 로그 레벨을 설정해 선택으로 로그메세지를 출력할수 있습니다.
 
   
    표. 여러가지 Appender클래스 종류
   
   ConsoleAppender클래스 
   - org.apache.log4j.ConsoleAppender클래스로
          이클립스에 콘솔 탭에 로그메세지를 출력할수 있도록 결정하는 클래스 
   
   FileAppender클래스
   - org.apache.log4j.FileAppender클래스로
          파일에 로그메세지를 출력(저장)할수 있도록 결정하는 클래스 
   
   RollingFileAppender클래스 
   - org.apache.log4j.rolling.RollingFileAppender클래스로
   	 파일 크기가 일정 기준을 넘으면 기존 파일을 백업파일로 바꾸고 처음부터 다시 
   	 로그메세지를 기록할수 있도록 결정하는 클래스 
   
   DailyRollingAppender클래스
   - org.apache.log4j.DailyRollingAppender클래스로
         설정한 기간단위로 새 파일을 만들어 로그메세지를 기록할수 있도록 결정하는 클래스 
   
  
  표.  일반적으로 많이 사용되는 PatternLayout클래스의 출력형식을 지정하는 속성들
  
  속성					설명
  %p			debug, info, error, fatal 등 로그레벨 이름 출력
  %m            로그 메세지 출력
  %d            로깅 이벤트 발생 시각 출력
  %F            로깅이 발생한 프로그램 파일이름 출력
  %l			로깅이 발생한  caller의 정보 출력
  %L			로깅이 발생한 caller의 라인 수 출력
  %M		       로깅이 발생한 method 이름 출력
  %c			로깅 메세지 앞에 전체 패키지 이름이나 전체 파일 이름 출력
  .... 	
 
 표.  log4j의 레벨은 총 6단계로 나누어 집니다.
  
  fatal 레벨 
  : 시스템 차원에서 심각한 문제가 발생해 애플리케이션 작동이 불가능할경우에
        해당하는 레벨 입니다. 일반적으로 애플리케이션애서는 사용할 일이 없습니다. 	
  
  ERROR 레벨
  : 실행중에 문제가 발생한 상태를 나타냅니다.
  
  WARN 레벨
  : 향후 시스템 오류의 원인이 될수 있는 경고 메세지를 나타내는 레벨
  
  INFO 레벨
  : 로그인, 상태 변경돠 같은 실제 애플리케이션 운영과 관련된 정보메세지를 나타내는 레벨
  
  DEBUG레벨
  : 개발시 디버깅 용도로 사용한 메세지를 나타내는 레벨
  
  TRACE레벨
  : DEBUG레벨 보다 상세한 로깅 정보를 출력하기 위해 도입된 레벨 
  
 참고.
 낮은 레벨로 코드의 메세지를 설정했다면 그 레벨 보다 높게 설정한 메세지들은 모두 출력됩니다.
 예를 들어 log4j.xml파일에서 DEBUG로 애플리케이션 레벨을 설정 했다면
 실제 코드에서 그 이상의 레벨로 설정된 메세지들은 모두 출력됩니다.
 더 자세한 내용은 log4j 홈페이지를 참고하기 바랍니다.
 
 http://logging.apache.org/log4j/1.2/manual.html  		 

 -->
























